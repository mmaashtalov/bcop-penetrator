import React, { useState, useEffect } from 'react';
import { useMessageStore } from '@/store/messageStore';
import { useDialogHistory } from '@/store/useDialogHistory';
import { analyzeMessage } from '@/analysis/analysis-engine-core';
import { generateResponses } from '@/analysis/response-generator';
import { adaptAnalysisForGoal } from '@/goal-engine';
import ResponseSelect from './ResponseSelect';
import { AnalysisMessage } from '@/types/response';

export default function ThreePanelDashboard() {
  const { messages, currentMessage, addMessage, setCurrentMessage, updateMessage } = useMessageStore();
  const { 
    currentSession, 
    addMessage: addDialogMessage, 
    createSession 
  } = useDialogHistory();
  
  const [inputText, setInputText] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedAnalysis, setExpandedAnalysis] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  useEffect(() => {
    if (!currentSession) {
      createSession('defensive'); // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }, [currentSession, createSession]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
  if (!currentSession) {
    return (
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center', 
        minHeight: '100vh',
        backgroundColor: '#f3f4f6'
      }}>
        <div style={{ textAlign: 'center', padding: '32px' }}>
          <p style={{ color: '#2563eb', fontWeight: '500' }}>üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞...</p>
        </div>
      </div>
    );
  }

  const handleAnalyze = async () => {
    if (!inputText.trim() || !currentSession) return;

    setError(null);
    setIsAnalyzing(true);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addDialogMessage({
      author: 'collector',
      text: inputText,
      goal: currentSession.goal
    });

    try {
      const analysis = await analyzeMessage(inputText);
      
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–¥ —Ü–µ–ª—å —Å–µ—Å—Å–∏–∏
      const adaptedAnalysis = adaptAnalysisForGoal(analysis, currentSession.goal);
      
      const newMessage: AnalysisMessage = {
        id: Date.now().toString(),
        timestamp: Date.now(),
        originalText: inputText,
        analysis: adaptedAnalysis
      };

      addMessage(newMessage);
      setInputText('');
      
      await handleGenerateResponses(newMessage);
    } catch (err: any) {
      console.error('Error during analysis:', err);
      let errorMessage = '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
      
      if (err.status === 401) {
        errorMessage = 'üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á OpenAI –≤ —Ñ–∞–π–ª–µ .env';
      } else if (err.message?.includes('ERR_TIMED_OUT') || err.message?.includes('timeout')) {
        errorMessage = '‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
      } else if (err.message?.includes('ERR_CONNECTION_CLOSED') || err.message?.includes('Connection error')) {
        errorMessage = 'üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else if (err.message?.includes('Failed to fetch')) {
        errorMessage = 'üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.';
      } else {
        errorMessage = `‚ùå ${err.message}`;
      }
      
      setError(errorMessage);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleGenerateResponses = async (message: AnalysisMessage) => {
    if (!currentSession) return;
    
    setIsGenerating(true);
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª—å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
      const responses = await generateResponses({
        goal: `–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${currentSession.goal} - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–∫—Ç–∏–∫—É`,
        analysisResult: message.analysis
      });

      updateMessage(message.id, { responses });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
      addDialogMessage({
        author: 'assistant',
        text: `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: ${JSON.stringify(responses)}`,
        responses: responses,
        analysis: message.analysis,
        goal: currentSession.goal
      });
      
    } catch (err: any) {
      console.error('Error generating responses:', err);
      setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: ${err.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleUseResponse = (response: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (currentSession) {
      addDialogMessage({
        author: 'user',
        text: response,
        goal: currentSession.goal
      });
    }
    
    setInputText(response);
    document.getElementById('message-input')?.focus();
  };

  return (
    <div style={{ 
      display: 'grid', 
      gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
      gap: '16px', 
      padding: '16px',
      minHeight: '100vh',
      backgroundColor: '#f3f4f6'
    }}>
      
      <div style={{ 
        backgroundColor: 'white', 
        borderRadius: '8px', 
        padding: '16px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        maxHeight: '100vh',
        overflowY: 'auto'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '16px' }}>
          <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#374151' }}>
            üìù –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
          </h2>
          {currentSession && (
            <div style={{
              padding: '4px 8px',
              backgroundColor: currentSession.goal === 'defensive' ? '#dbeafe' : 
                              currentSession.goal === 'aggressive' ? '#fee2e2' : '#dcfce7',
              color: currentSession.goal === 'defensive' ? '#1e40af' : 
                     currentSession.goal === 'aggressive' ? '#dc2626' : '#166534',
              borderRadius: '12px',
              fontSize: '12px',
              fontWeight: '500'
            }}>
              {currentSession.goal === 'defensive' ? 'üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∞—è' : 
               currentSession.goal === 'aggressive' ? '‚öîÔ∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è' : 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è'}
            </div>
          )}
        </div>

        {error && (
          <div style={{
            padding: '12px',
            backgroundColor: '#fee2e2',
            border: '1px solid #fca5a5',
            borderRadius: '6px',
            color: '#b91c1c',
            marginBottom: '16px',
            fontSize: '14px',
          }}>
            {error}
          </div>
        )}

        <h3 style={{ fontSize: '16px', fontWeight: '600', marginBottom: '12px', color: '#374151' }}>
          üí¨ –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
        </h3>
        
        <div style={{ marginBottom: '16px' }}>
          <textarea
            id="message-input"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
            style={{
              width: '100%',
              minHeight: '100px',
              padding: '12px',
              border: '2px solid #d1d5db',
              borderRadius: '6px',
              fontSize: '14px',
              resize: 'vertical',
              boxSizing: 'border-box'
            }}
          />
          <button
            onClick={handleAnalyze}
            disabled={isAnalyzing || !inputText.trim()}
            style={{
              marginTop: '8px',
              width: '100%',
              padding: '10px',
              backgroundColor: isAnalyzing ? '#9ca3af' : '#2563eb',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: isAnalyzing ? 'not-allowed' : 'pointer',
              fontWeight: '500'
            }}
          >
            {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        </div>

        <div>
          {messages.length === 0 ? (
            <p style={{ color: '#6b7280', fontStyle: 'italic', textAlign: 'center' }}>
              –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤
            </p>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                onClick={() => setCurrentMessage(message)}
                style={{
                  padding: '12px',
                  border: currentMessage?.id === message.id ? '2px solid #2563eb' : '1px solid #e5e7eb',
                  borderRadius: '6px',
                  cursor: 'pointer',
                  marginBottom: '8px',
                  backgroundColor: currentMessage?.id === message.id ? '#eff6ff' : '#fafafa'
                }}
              >
                <p style={{ fontSize: '12px', color: '#6b7280', marginBottom: '4px' }}>
                  {new Date(message.timestamp).toLocaleString()}
                </p>
                <p style={{ fontSize: '14px', color: '#374151', lineHeight: '1.4' }}>
                  {message.originalText.substring(0, 100)}
                  {message.originalText.length > 100 ? '...' : ''}
                </p>
                {message.responses && (
                  <span style={{ fontSize: '12px', color: '#059669', fontWeight: '500' }}>
                    ‚úÖ –û—Ç–≤–µ—Ç—ã –≥–æ—Ç–æ–≤—ã
                  </span>
                )}
              </div>
            ))
          )}
        </div>
      </div>

      <div style={{ 
        backgroundColor: 'white', 
        borderRadius: '8px', 
        padding: '16px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        maxHeight: '100vh',
        overflowY: 'auto'
      }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: '16px' }}>
          <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#374151' }}>
            üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          </h2>
          {currentMessage && (
            <button
              onClick={() => setExpandedAnalysis(!expandedAnalysis)}
              style={{
                padding: '6px 12px',
                backgroundColor: '#f3f4f6',
                border: '1px solid #d1d5db',
                borderRadius: '4px',
                cursor: 'pointer',
                fontSize: '12px'
              }}
            >
              {expandedAnalysis ? 'üìï –°–≤–µ—Ä–Ω—É—Ç—å' : 'üìñ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
            </button>
          )}
        </div>

        {!currentMessage ? (
          <p style={{ color: '#6b7280', fontStyle: 'italic', textAlign: 'center' }}>
            –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
          </p>
        ) : (
          <div>
            <div style={{ marginBottom: '16px', padding: '12px', backgroundColor: '#f9fafb', borderRadius: '6px' }}>
              <h4 style={{ fontSize: '14px', fontWeight: '600', marginBottom: '8px', color: '#374151' }}>
                –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
              </h4>
              <p style={{ fontSize: '14px', color: '#4b5563', lineHeight: '1.5' }}>
                {currentMessage.originalText}
              </p>
            </div>

            <div style={{ 
              backgroundColor: expandedAnalysis ? '#fffbeb' : '#f3f4f6',
              border: '1px solid #e5e7eb',
              borderRadius: '6px',
              padding: '12px'
            }}>
              {expandedAnalysis ? (
                <pre style={{ 
                  margin: 0, 
                  fontFamily: 'Monaco, Consolas, monospace',
                  fontSize: '12px',
                  whiteSpace: 'pre-wrap',
                  lineHeight: '1.4',
                  color: '#374151'
                }}>
                  {JSON.stringify(currentMessage.analysis, null, 2)}
                </pre>
              ) : (
                <p style={{ margin: 0, color: '#6b7280', fontSize: '14px' }}>
                  –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—Ä–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
                </p>
              )}
            </div>
          </div>
        )}
      </div>

      <div style={{ 
        backgroundColor: 'white', 
        borderRadius: '8px', 
        padding: '16px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        maxHeight: '100vh',
        overflowY: 'auto'
      }}>
        <h2 style={{ fontSize: '20px', fontWeight: '600', marginBottom: '16px', color: '#374151' }}>
          üí¨ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        </h2>

        {isGenerating ? (
          <div style={{ textAlign: 'center', padding: '32px' }}>
            <p style={{ color: '#2563eb', fontWeight: '500' }}>üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç—ã...</p>
          </div>
        ) : !currentMessage?.responses ? (
          <p style={{ color: '#6b7280', fontStyle: 'italic', textAlign: 'center' }}>
            {currentMessage ? '–û—Ç–≤–µ—Ç—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤'}
          </p>
        ) : (
          <ResponseSelect
            responses={currentMessage.responses}
            onUseResponse={handleUseResponse}
          />
        )}
      </div>
    </div>
  );
}