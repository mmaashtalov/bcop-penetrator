import jsPDF from 'jspdf';
import { DialogSession, DialogMessage } from '../store/useDialogHistory';

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ –≤ PDF
export function exportDialogToPDF(session: DialogSession) {
  if (!session || !session.messages) {
    console.warn('No session data to export');
    return;
  }
  
  const doc = new jsPDF();
  const pageHeight = doc.internal.pageSize.height;
  let yPosition = 20;
  const lineHeight = 7;
  const maxLineWidth = 180;

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  doc.setFontSize(16);
  doc.text(`–î–∏–∞–ª–æ–≥ —Å –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–º`, 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(12);
  doc.text(`–î–∞—Ç–∞: ${new Date(session.startTime).toLocaleString('ru-RU')}`, 20, yPosition);
  yPosition += 7;
  doc.text(`–¶–µ–ª—å: ${getGoalLabel(session.goal)}`, 20, yPosition);
  yPosition += 10;

  // –°–æ–æ–±—â–µ–Ω–∏—è
  session.messages.forEach((message, index) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (yPosition > pageHeight - 40) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(10);
    const timestamp = new Date(message.timestamp).toLocaleTimeString('ru-RU');
    const author = getAuthorLabel(message.author);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    doc.setFont('helvetica', 'bold');
    doc.text(`${index + 1}. [${timestamp}] ${author}:`, 20, yPosition);
    yPosition += lineHeight;
    
    // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    doc.setFont('helvetica', 'normal');
    const lines = doc.splitTextToSize(message.text, maxLineWidth);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - 20) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(line, 20, yPosition);
      yPosition += lineHeight;
    });
    
    // –ê–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (message.analysis && message.author === 'collector') {
      yPosition += 3;
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(8);
      doc.text('üìä –ê–Ω–∞–ª–∏–∑:', 25, yPosition);
      yPosition += 5;
      
      const analysisText = `–ê–≥—Ä–µ—Å—Å–∏—è: ${message.analysis.aggression || 'N/A'}, –£–≥—Ä–æ–∑—ã: ${message.analysis.threats || 'N/A'}`;
      doc.text(analysisText, 25, yPosition);
      yPosition += 5;
    }
    
    // –û—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (message.responses) {
      yPosition += 3;
      doc.setFont('helvetica', 'italic');
      doc.setFontSize(8);
      doc.text('ü§ñ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:', 25, yPosition);
      yPosition += 5;
      
      Object.entries(message.responses).forEach(([style, response]) => {
        if (yPosition > pageHeight - 30) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(`${getStyleLabel(style)}: ${response.substring(0, 100)}...`, 25, yPosition);
        yPosition += 5;
      });
    }
    
    yPosition += 5; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const filename = `dialog_${session.startTime}_${Date.now()}.pdf`;
  doc.save(filename);
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
export function exportDialogToCSV(session: DialogSession) {
  const headers = ['–í—Ä–µ–º—è', '–ê–≤—Ç–æ—Ä', '–°–æ–æ–±—â–µ–Ω–∏–µ', '–¶–µ–ª—å', '–ê–Ω–∞–ª–∏–∑_–ê–≥—Ä–µ—Å—Å–∏—è', '–ê–Ω–∞–ª–∏–∑_–£–≥—Ä–æ–∑—ã', '–û—Ç–≤–µ—Ç_–ü—Ä–∞–≤–æ–≤–æ–π', '–û—Ç–≤–µ—Ç_–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–û—Ç–≤–µ—Ç_–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π'];
  
  const rows = session.messages.map(message => [
    new Date(message.timestamp).toLocaleString('ru-RU'),
    getAuthorLabel(message.author),
    `"${message.text.replace(/"/g, '""')}"`, // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
    getGoalLabel(session.goal),
    message.analysis?.aggression || '',
    message.analysis?.threats || '',
    message.responses?.legal ? `"${message.responses.legal.replace(/"/g, '""')}"` : '',
    message.responses?.professional ? `"${message.responses.professional.replace(/"/g, '""')}"` : '',
    message.responses?.sarcastic ? `"${message.responses.sarcastic.replace(/"/g, '""')}"` : ''
  ]);

  const csvContent = [headers, ...rows]
    .map(row => row.join(','))
    .join('\n');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' }); // BOM –¥–ª—è Excel
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `dialog_${session.startTime}_${Date.now()}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
export function exportAllHistoryToJSON(sessions: DialogSession[]) {
  const exportData = {
    exportDate: new Date().toISOString(),
    version: '1.0',
    totalSessions: sessions.length,
    sessions: sessions
  };

  const jsonContent = JSON.stringify(exportData, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `bcop_history_${Date.now()}.json`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getAuthorLabel(author: string): string {
  switch (author) {
    case 'user': return '–í—ã';
    case 'collector': return '–ö–æ–ª–ª–µ–∫—Ç–æ—Ä';
    case 'assistant': return '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç';
    default: return author;
  }
}

function getGoalLabel(goal: string): string {
  switch (goal) {
    case 'defensive': return '–ó–∞—â–∏—Ç–Ω–∞—è';
    case 'aggressive': return '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è';
    case 'informational': return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è';
    default: return goal;
  }
}

function getStyleLabel(style: string): string {
  switch (style) {
    case 'legal': return '–ü—Ä–∞–≤–æ–≤–æ–π';
    case 'professional': return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π';
    case 'sarcastic': return '–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π';
    default: return style;
  }
}